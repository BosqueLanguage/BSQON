declare namespace Main;
const re_SAFEIDENTIFIERCHAR: CRegex = /[a-zA-Z0-9-_]/c;

type ALPHANUMERIC = CString of / [a-zA-Z0-9]+/c;
type EMAIL = CString of /${Main::re_SAFEIDENTIFIERCHAR}+('.'${Main::re_SAFEIDENTIFIERCHAR})* '@' (${Main::re_SAFEIDENTIFIERCHAR}+ '.')+ [a-zA-Z]+ /c;

type USER_PHONE = CString of /[+]? [1-9][0-9]?' '* '('? [0-9]{3} ')'? [ -]?[0-9]{3}[ -]?[0-9]{4} /c;

type CCNUMBER = CString of /[0-9 -]{13,16}/c;
%% Should be a String
const re_USERNAME: CRegex = / .{1, 50} /c;
type USER_NAME = CString of / ${Main::re_USERNAME} /c;

type USER_ADDRESS = CString of /[0-9a-zA-Z -,.#()]+/c;


entity UserDTO {
    field email: Option<EMAIL>;
    invariant userEmailNotEmpty($email);
    field password: ALPHANUMERIC;
    invariant $password.value.size() >= 6n && $password.value.size() <= 50n;
    field name: Option<USER_NAME>;
    invariant userNameNotEmpty($name);
    field phone: Option<USER_PHONE>;
    invariant userPhoneNotEmpty($phone);
    field address: Option<USER_ADDRESS>;
    invariant userAddressNotEmpty($address);
	field id: Int;
	invariant $id > 0i;
}

function userEmailNotEmpty(x: Option<EMAIL>) : Bool {
    if(x)@@none {
        return false;
    }
    return !x.value.empty() && x.value.size() <= 50n;
}

function userNameNotEmpty(x: Option<USER_NAME>): Bool {
    if(x)@@none {
        return false;
    }
    return !x.value.empty();
}

function userPhoneNotEmpty(x: Option<USER_PHONE>): Bool {
    if(x)@@none {
        return false;
    }
    return !x.value.empty() && x.value.size() <= 20n;
}

function userAddressNotEmpty(x: Option<USER_ADDRESS>): Bool {
    if(x)@@none {
        return false;
    }
    return !x.value.empty() && x.value.size() <= 100n;
}

function getCustomer(id: Int): UserDTO{
    return UserDTO {
        some('jch270@uky.edu'<EMAIL>),
        '12345678'<ALPHANUMERIC>,
        some('James Chen'<USER_NAME>),
        some('+12 111-111-1111'<USER_PHONE>),
        some('123 Fake Street'<USER_ADDRESS>),
		id,
	};
}


public function main(): UserDTO { 
	let cust_id = 5i;
	let user = getCustomer(cust_id);
    return user;
}
